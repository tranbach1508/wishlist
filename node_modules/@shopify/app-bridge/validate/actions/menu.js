"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var actions_1 = require("../../actions");
var Button_1 = require("../../actions/Button");
var type_validate_1 = require("../type-validate");
var utils_1 = require("../utils");
var button_1 = require("./button");
var buttonSchemaWithId = type_validate_1.composeSchemas(button_1.buttonSchema, type_validate_1.matchesObject({
    id: type_validate_1.matchesString(),
}));
function getNavigationMenuSchema(props, isPayload) {
    if (props === void 0) { props = {}; }
    if (isPayload === void 0) { isPayload = false; }
    var activeValidator = isPayload ? type_validate_1.matchesString() : buttonSchemaWithId;
    var baseSchema = type_validate_1.matchesObject({
        items: type_validate_1.makeOptional(type_validate_1.matchesArray(buttonSchemaWithId)),
        active: type_validate_1.makeOptional(activeValidator),
    });
    var items = props.items, active = props.active;
    if (items && active) {
        var activeItemSchema = type_validate_1.matchesObject({
            active: type_validate_1.composeSchemas(activeValidator, function (value) {
                return items.find(function (item) { return (isPayload ? item.id === value : item.id === value.id); })
                    ? undefined
                    : [
                        {
                            error: 'invalid_active_item',
                            value: value,
                            message: 'expected active item to exist in menu items',
                        },
                    ];
            }),
        });
        return type_validate_1.composeSchemas(baseSchema, activeItemSchema);
    }
    return baseSchema;
}
function validateProps(props) {
    return type_validate_1.validate(props, getNavigationMenuSchema(props));
}
exports.validateProps = validateProps;
function validateAction(action) {
    var schema = getNavigationMenuSchema(action.payload, true);
    switch (action.type) {
        default:
        case actions_1.NavigationMenu.ActionType.UPDATE:
            return type_validate_1.validate(action, utils_1.createActionValidator(actions_1.NavigationMenu.ActionType, schema, true, false));
        case actions_1.NavigationMenu.ActionType.BUTTON_CLICK:
            return button_1.validateAction(__assign({}, action, { type: Button_1.ActionType.CLICK }));
        case actions_1.NavigationMenu.ActionType.BUTTON_UPDATE:
            return button_1.validateAction(__assign({}, action, { type: Button_1.ActionType.UPDATE }));
    }
}
exports.validateAction = validateAction;
