"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var type_validate_1 = require("../type-validate");
var utils_1 = require("../utils");
var actions_1 = require("../../actions");
var Link_1 = require("../../actions/Link");
exports.ActionType = Link_1.ActionType;
var navigation_1 = require("./navigation");
exports.linkSchema = type_validate_1.matchesObject({
    label: type_validate_1.matchesString(),
});
exports.linkSchemaWithId = type_validate_1.composeSchemas(type_validate_1.matchesObject({
    id: type_validate_1.matchesString(),
}), exports.linkSchema);
function allowString(validator) {
    return function (value) {
        if (typeof value === 'string') {
            return undefined;
        }
        return validator(value);
    };
}
function getDestinationSchema(props) {
    if (!props) {
        return function () { return undefined; };
    }
    var newContextSchema = type_validate_1.matchesObject({ newContext: type_validate_1.makeOptional(type_validate_1.matchesBoolean()) });
    var schema;
    switch (props.redirectType) {
        case actions_1.Link.RedirectType.ADMIN_PATH:
            schema = allowString(type_validate_1.composeSchemas(utils_1.relativePathSchema, newContextSchema));
            break;
        case actions_1.Link.RedirectType.ADMIN_SECTION:
            schema = type_validate_1.composeSchemas(navigation_1.getSectionSchema(props.destination), newContextSchema);
            break;
        case actions_1.Link.RedirectType.REMOTE:
            schema = allowString(type_validate_1.composeSchemas(type_validate_1.matchesObject({
                url: type_validate_1.composeSchemas(type_validate_1.matchesString(), function (value) { return navigation_1.matchesAbsolutePath(value); }),
            }), newContextSchema));
            break;
        case actions_1.Link.RedirectType.APP:
        default:
            schema = allowString(utils_1.relativePathSchema);
            break;
    }
    return schema;
}
function getLinkSchema(props, isPayload) {
    if (isPayload === void 0) { isPayload = false; }
    var baseLinkSchema = isPayload ? exports.linkSchemaWithId : exports.linkSchema;
    var destinationSchema = type_validate_1.matchesObject({
        redirectType: type_validate_1.matchesEnum(actions_1.Redirect.Action),
        destination: getDestinationSchema(props),
    });
    return type_validate_1.composeSchemas(baseLinkSchema, destinationSchema);
}
function validateProps(props) {
    return type_validate_1.validate(props, getLinkSchema(props));
}
exports.validateProps = validateProps;
function validateAction(action) {
    return type_validate_1.validate(action, utils_1.createActionValidator(actions_1.Link.ActionType, getLinkSchema(action.payload, true), true, true));
}
exports.validateAction = validateAction;
