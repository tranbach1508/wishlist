import { Button, Payload as ButtonPayload } from '../../Button';
import { ClientApplication } from '../../../client';
import { ActionSetWithChildren } from '../../helper';
import { ActionSetProps, ClickAction, Group, MetaAction } from '../../types';
export declare enum Action {
    UPDATE = "UPDATE"
}
export declare enum ActionType {
    UPDATE = "APP::MENU::NAVIGATION_MENU::UPDATE",
    BUTTON_CLICK = "APP::MENU::NAVIGATION_MENU::BUTTON::CLICK",
    BUTTON_UPDATE = "APP::MENU::NAVIGATION_MENU::BUTTON::UPDATE"
}
export interface Options {
    items?: Button[];
    active?: Button;
}
export interface Payload {
    readonly id?: string;
    items: ButtonPayload[];
    active?: string;
}
export interface UpdateAction extends MetaAction {
    readonly group: typeof Group.Menu;
    payload: Payload;
}
export declare type NavigationMenuAction = UpdateAction | ClickAction | MetaAction;
export declare function update(payload: Payload): UpdateAction;
export declare class NavigationMenu extends ActionSetWithChildren implements ActionSetProps<Options, Payload> {
    private items;
    private active?;
    private itemsOptions?;
    private activeOptions?;
    constructor(app: ClientApplication<any>, options: Options);
    readonly options: Options;
    readonly payload: Payload;
    set(options: Partial<Options>, shouldUpdate?: boolean): this;
    dispatch(action: Action): this;
    private updateItems;
    private setItems;
}
export declare function create(app: ClientApplication<any>, options: Options): NavigationMenu;
