import { ClientApplication } from '../../client/index';
import { Action as RedirectType, AdminPathPayload, AdminSectionPayload, AppPayload, RemotePayload, ResourceType } from '../Navigation/Redirect';
import { ActionSet } from '../helper';
import { ActionSetProps, Group, MetaAction, Component } from '../types';
export { RedirectType, ResourceType };
export declare enum Action {
    UPDATE = "UPDATE"
}
export declare enum ActionType {
    UPDATE = "APP::LINK::UPDATE"
}
export interface BaseLink {
    label: string;
}
export declare type AppLink = BaseLink & {
    redirectType: RedirectType.APP;
    destination: AppPayload;
};
export declare type AdminPathLink = BaseLink & {
    redirectType: RedirectType.ADMIN_PATH;
    destination: AdminPathPayload;
};
export declare type AdminSectionLink = BaseLink & {
    redirectType: RedirectType.ADMIN_SECTION;
    destination: AdminSectionPayload;
};
export declare type RemoteLink = BaseLink & {
    redirectType: RedirectType.REMOTE;
    destination: RemotePayload;
};
export declare type Options = AppLink | AdminPathLink | AdminSectionLink | RemoteLink;
export declare type Payload = Options & {
    readonly id: string;
};
export interface UpdateAction extends MetaAction {
    readonly group: typeof Group.Link;
    payload: Payload;
}
export declare function update(group: string, component: Component, props: Payload): UpdateAction;
export declare class Link extends ActionSet implements ActionSetProps<Options, Payload> {
    options: Options;
    constructor(app: ClientApplication<any>, options: Options);
    readonly payload: Payload;
    set(options: Partial<Options>, shouldUpdate?: boolean): this;
    dispatch(action: Action): this;
}
export declare function create(app: ClientApplication<any>, options: Options): Link;
