"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var Redirect_1 = require("../Navigation/Redirect");
exports.RedirectType = Redirect_1.Action;
exports.ResourceType = Redirect_1.ResourceType;
var helper_1 = require("../helper");
var types_1 = require("../types");
var Action;
(function (Action) {
    Action["UPDATE"] = "UPDATE";
})(Action = exports.Action || (exports.Action = {}));
var ActionType;
(function (ActionType) {
    ActionType["UPDATE"] = "APP::LINK::UPDATE";
})(ActionType = exports.ActionType || (exports.ActionType = {}));
function update(group, component, props) {
    var id = component.id;
    var label = props.label;
    var action = helper_1.getEventNameSpace(group, Action.UPDATE, component);
    var payload = __assign({ id: id,
        label: label }, props);
    return helper_1.actionWrapper({ type: action, group: group, payload: payload });
}
exports.update = update;
var Link = /** @class */ (function (_super) {
    __extends(Link, _super);
    function Link(app, options) {
        var _this = _super.call(this, app, types_1.Group.Link, types_1.Group.Link) || this;
        _this.options = options;
        _this.set(options, false);
        return _this;
    }
    Object.defineProperty(Link.prototype, "payload", {
        get: function () {
            return __assign({ id: this.id }, this.options);
        },
        enumerable: true,
        configurable: true
    });
    Link.prototype.set = function (options, shouldUpdate) {
        if (shouldUpdate === void 0) { shouldUpdate = true; }
        this.options = helper_1.getMergedProps(this.options, options);
        if (shouldUpdate) {
            this.dispatch(Action.UPDATE);
        }
        return this;
    };
    Link.prototype.dispatch = function (action) {
        switch (action) {
            case Action.UPDATE:
                this.app.dispatch(update(this.group, this.component, this.payload));
                break;
        }
        return this;
    };
    return Link;
}(helper_1.ActionSet));
exports.Link = Link;
function create(app, options) {
    return new Link(app, options);
}
exports.create = create;
